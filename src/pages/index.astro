---
import "@/styles/globals.css";
import { Button } from "@/components/ui/button";
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Simple TP</title>
    <style>
      #tp {
        font-size: 5rem;
        transform: scaleX(1);
      }

      #tp.reversed {
        transform: scaleX(-1);
      }
    </style>
  </head>
  <body>
    <div class="fixed w-full z-10 p-2">
      <div
        class="rounded-lg border bg-card text-card-foreground shadow-sm w-full p-2 flex justify-between items-center bg-white"
      >
        <div class="flex gap-2 items-center">
          <Button data-slow-down>-</Button>
          <Button data-speed-up>+</Button>
        </div>
        <div>
          <Button id="action" data-toggle-play>Play</Button>
        </div>
      </div>
    </div>
    <div class="pt-20"></div>
    <div class="flex items-end justify-end mr-4 mb-1">
      <Button class="my-10" htmlType="button" id="format">Formartar</Button>
    </div>
    <div id="tp" class="relative z-0 p-2 border min-h-max" contenteditable>
      paste here <br /> HIT CTRL + Y para interver
    </div>
  </body>

  <script>
    const updateScrollTime = (velocity: number) => {
      scrollTime = velocity;
    };

    let scrolling: number | undefined,
      scrollTime: number = 15;

    function startScroll() {
      window.scrollBy(0, 1);
      scrolling = setTimeout(startScroll, scrollTime);
    }

    function stopScroll() {
      clearTimeout(scrolling);
      scrolling = undefined;
    }

    interface KeysProps {
      [key: string]: boolean;
    }

    let keys: KeysProps = {};
    window.addEventListener("keyup", (e) => {
      keys = {};
    });

    window.addEventListener("keydown", (e) => {
      keys[e.key] = true;

      if (keys["Control"] && keys["y"]) {
        document.getElementById("tp")?.classList.toggle("reversed");
      } else if (keys["Control"] && keys["l"]) {
        togglePlay();
      } else if (keys["Control"] && keys["j"]) {
        decreaseSpeed();
      } else if (keys["Control"] && keys["k"]) {
        increaseSpeed(e);
      } else if (keys["Control"] && keys["i"]) {
        formatText();
      }
    });

    function togglePlay() {
      if (scrolling) {
        stopScroll();
        document.getElementById("action")!.innerHTML = "Play";
      } else {
        startScroll();
        document.getElementById("action")!.innerHTML = "Stop";
      }
    }

    const increaseSpeed = (e) => {
      updateScrollTime(scrollTime - 1);
      if (scrollTime < 0) {
        scrollTime = 0;
        e.currentTarget.disabled = true;
      }
    };

    const decreaseSpeed = () => {
      updateScrollTime(scrollTime + 1);
    };

    const clicks = {
      "data-speed-up": increaseSpeed,
      "data-slow-down": decreaseSpeed,
      "data-toggle-play": togglePlay,
    };

    Object.keys(clicks).forEach((data) => {
      document
        .querySelector(`[${data}]`)
        ?.addEventListener("click", clicks[data]);
    });

    function isTextSelectedInDiv(divElement) {
      const selection = window.getSelection();
      if (!selection.rangeCount) return false;

      const range = selection.getRangeAt(0);
      if (range.collapsed) return false;

      const selectedNode = selection.anchorNode;
      return divElement.contains(selectedNode);
    }

    function checkSelectionAndUpdateButton() {
      const editableDiv = document.querySelector("#tp");
      const formatButton = document.getElementById(
        "format",
      ) as HTMLButtonElement;
      formatButton.disabled = !isTextSelectedInDiv(editableDiv);
    }

    document.addEventListener("selectionchange", checkSelectionAndUpdateButton);

    function formatText() {
      const editableDiv = document.querySelector("#tp");
      const selection = window.getSelection();

      if (
        selection.rangeCount > 0 &&
        editableDiv.contains(selection.anchorNode)
      ) {
        const range = selection.getRangeAt(0);
        const selectedText = range.toString();

        if (selectedText.trim().length > 0) {
          const textNode = document.createTextNode(selectedText);

          range.deleteContents();
          range.insertNode(textNode);

          selection.removeAllRanges();
          const newRange = document.createRange();
          newRange.selectNodeContents(textNode);
          selection.addRange(newRange);
        }
      }
    }
    document.getElementById("format").addEventListener("click", formatText);
  </script>
</html>
